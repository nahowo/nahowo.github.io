---
layout: post
title: "[자바 백엔드] 2장 MVC 패턴 이해와 실습"
date: 2024-1-3 16:04
category: "Spring-Boot"
toc: true
toc_sticky: true
---
### 2.1 뷰 템플릿과 MVC 패턴

- 뷰 템플릿
    
    웹페이지를 하나의 틀로 만들어 변수를 삽입해서 페이지 정보를 표시하는 것
    
    1장에서 스프링 부트 프로젝트를 만들 때 의존성 도구로 추가했던 Mustache를 사용하여 뷰 템플릿을 만든다. 
    
- MVC 패턴
    
    **MVC(Model-View-Controller) 패턴**은 사용자 인터페이스, 데이터/논리 제어를 구현하는 데 사용되는 디자인 패턴이다. 비즈니스 로직과 화면을 구분하는 데 중점을 둔다. 
    
    **뷰(Veiw, 뷰 템플릿)**은 레이아웃과 화면을 담당하고, 데이터를 모델에게서 전달받아 사용자에게 보여질 방식을 정의한다. **컨트롤러(Controller)**는 클라이언트 요청에 따라 모델과 뷰로 요청을 전달하여 서버에서 이를 처리하는 역할을 한다. **모델(Model)**은 데이터 구조를 정의하고 비즈니스 로직을 관리한다. 
    

### 2.2 MVC 패턴을 활용해 뷰 템플릿 페이지 만들기

1. 뷰 템플릿 페이지 만들기
    
    위에서 배운 MVC 패턴을 구현해 보자. 우선 화면에 보여질 뷰 템플릿 페이지를 만든다. 이때 Mustache를 사용하며, 뷰 템플릿 페이지는 src>main>resources>templates 경로에 새로운 파일을 추가하고, [뷰 템플릿 명].mustache를 생성한다. doc를 입력한 뒤 탭을 누르면 자동으로 html 문법이 생성된다. <body> 태그 안에 페이지에 넣고 싶은 내용을 작성한다. 
    
    변수를 사용하기 위해서는 {{}} 안에 변수명을 넣어주면 된다. 
    
2. 컨트롤러 만들기
    
    다음으로 컨트롤러를 제작한다. 서버 실행 시에 사용하는 com.example.FirstProject에 controller라는 패키지를 생성한다. 이 패키지에 다시 FirstController라는 클래스를 생성하고, 여기에 컨트롤러를 작성하면 된다. 
    
    우선 `@Controller` 어노테이션을 사용해 작성할 클래스를 컨트롤러로 선언한다. 해당 어노테이션을 작성하면 `org.springframework.stereotype.Controller` 클래스가 자동으로 임포트된다. 해당 클래스에 반환형이 문자열인 메서드를 작성하고, return “[작성했던 뷰 페이지 이름(~.mustache에서의 ~)]”를 작성한다. 
    
    다음으로 url을 연결해 준다. 방금 작성한 메서드 앞에 `@GetMapping(”/[url 주소]”)` 어노테이션을 작성해서 기본 url인 localhost:8080/[url 주소]로 해당 뷰 템플릿에 접근 가능하도록 한다. 
    
3. 모델 만들기
    
    뷰 템플릿 페이지에서 변수를 사용하지 않았다면 모델을 만들지 않아도 뷰 템플릿을 볼 수 있다. 하지만 변수를 사용하지 않는다면 훨씬 많은 페이지를 작성해야 할 수 있기 때문에, 변수(데이터)를 전달하는 모델을 만들어 보자. 
    
    모델도 방금 작성한 컨트롤러가 있는 메서드에 작성한다. 메서드의 매개변수에 `Model model`을 추가해 준 뒤, 메서드 내부에 `model.addAttribute(”[변수명]”, “[변수값]”)`으로 변수를 정의한다. 
    

<aside>
📌 변수값/뷰 템플릿 컨텐츠가 한글일 때 “?”로 표시되는 현상 해결하기!
src>main>resources>application.properties 파일에 `server.servlet.encoding.force=true` 코드를 추가한다.

</aside>

### 2.3 MVC의 역할과 실행 흐름 이해하기

1. 사용자가 url을 통해 페이지를 요청한다. 
2. 컨트롤러가 해당 url의 메서드를 실행한다. 
3. 메서드에서 사용하는 변수를 모델로부터 가져온다. 
4. 해당하는 ~.mustache 파일을 사용자에게 반환한다. 

### 2.4 뷰 템플릿 페이지에 레이아웃 적용하기

뷰 템플릿 페이지에 bootstrap으로 레이아웃을 적용할 수 있다. 레이아웃을 저장할 경로는 src>main>resources>templates 경로에 layouts 폴더를 만들어 해당 폴더 안에 레이아웃들을 저장한다(경로는 임의로 변경할 수 있다). 해당 레이아웃을 .mustache 파일에서 적용할 때는 `{{>layouts/[레이아웃 이름]}}`형식으로 접근한다. 

---

위 과정을 거쳐 만든 페이지이다!

![spring boot page](![2024-1-3-springboot2](https://github.com/nahowo/Algorithm-study/assets/96415630/e170dd9b-4eee-478e-bc7b-4e618f64e9d2))

### 번외: 현재까지의 간단한 스프링부트 학습 후기

우선 자바를 잘 모르는데도 생각보다 어렵지 않아서 신기했다. 하지만 지금까지는 간단한 것들만 구현했기 때문에, 나중에 로직이 더 추가된다면 자바 공부도 같이 해야 할 것 같다. 

장고랑 비교했을 때 모델과 컨트롤러를 같은 파일에 작성할 수 있어서 굉장히 편한 것 같다. 장고에서는 url 따로, 모델 따로, 뷰 따로… 이런 식이라 변수명도 계속 헷갈리고 오류 찾을 때도 힘들었는데… 파일별로 분류되는 것이 아니라 메서드별로 구분되어서 너무 좋다!
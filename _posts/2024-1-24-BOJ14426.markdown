---
layout: post
title: "[BOJ] 14426: 접두사 찾기"
date: "2024-1-24 12:54"
category: "PS"
toc: true
toc_sticky: true
---
### [BOJ] 14426: 접두사 찾기

[문제 링크](https://www.acmicpc.net/problem/14426)

### 문제 설명

집합 s에 해당하는 n개의 문자열이 먼저 주어지고, 이후에 주어지는 m개의 문자열 중 s의 접두사가 있는지 확인해 보자. 즉 m개 문자열 중의 하나가 ‘apple’일 때, s의 문자열 중 ‘apple~’로 시작하는 문자열이 있는지 확인하는 것이다. 

### 나의 풀이

```python
import sys
input=sys.stdin.readline

def func():
    n,m=map(int,input().split())
    s=set()
    cnt=0
    for _ in range(n):
        tmp=input().rstrip()
        for i in range(1,len(tmp)+1):
            s.add(tmp[:i])
    for i in range(m):
        check=input().rstrip()
        if check in s:
            cnt+=1
    return cnt

print(func())
```

첫 번째 풀이는 s 집합 안에 n개의 문자열을 전부 슬라이싱해서 삽입하는 방식으로 풀었다. 이 경우 n개 문자열별로 문자열의 길이만큼 for문을 돌리게 되고, 슬라이싱에서도 동일한 시간이 걸린다. 

```python
import sys
input=sys.stdin.readline

def func():
    n,m=map(int,input().split())
    s=[]
    check=[]
    for _ in range(n):
        s.append(input().rstrip())
    for _ in range(m):
        check.append(input().rstrip())
    s.sort()
    check.sort()
    s_key=c_key=0
    cnt=0

    while s_key<n and c_key<m:
        if s[s_key]<check[c_key]:
            s_key+=1
        else:
            if s[s_key][:len(check[c_key])]==check[c_key]:
                cnt+=1
            c_key+=1
    return cnt

print(func())
```

두 번째 풀이는 다른 사람의 풀이를 참고해서 풀었다. s 배열과 check 배열에 각 n, m개 문자열을 삽입한 뒤 정렬한다. 이 때 각 배열의 인덱스를 표시할 key를 0~n,m까지 돌린다. 서로 다른 배열이지만 두 key를 투 포인터처럼 사용하면 된다. 

### 시간복잡도

첫 번째 풀이는 n개의 문자열 삽입에 O(n), 각 문자열 삽입 시 길이만큼 돌리는 for문과 문자열 슬라이싱에 사용되는 시간에 O(500^2)이 걸린다. 따라서 최종 시간복잡도는 O(n*500*500)이다. 

두 번째 풀이는 배열 정렬에 O(nlogn)이 걸리지만 while문에서 문자열끼리 비교할 때 문자열 길이만큼 시간이 걸리므로 O(n*500)이다. log10^4보다 500이 훨씬 크기 때문에 두 번째 풀이의 최종적인 시간복잡도는 O(n*500)이다.
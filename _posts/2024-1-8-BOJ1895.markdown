---
layout: post
title: "[BOJ] 1895: 필터"
date: 2024-1-8 14:33
category: PS
toc: true
toc_sticky: true
---
<!-- ## :  -->
### [BOJ] 1895: 필터

[문제 링크](https://www.acmicpc.net/problem/1895)

### 문제 설명

머신러닝의 CNN에서 사용되는 평균 풀링처럼, 3*3 크기의 필터를 이미지 좌측 위쪽에서 우측 아래로 순차적으로 슬라이딩하며 해당 필터 부분의 중간값을 찾는 문제이다. 각 부분별 중간값이 t보다 크거나 같은 것의 개수만 구하면 되므로, 출력 층을 만들 필요는 없다. 

### 나의 풀이

```python
import sys
input=sys.stdin.readline

r,c=map(int,input().split())
image=[]
new_image=[]
for i in range(r):
    image.append(list(map(int,input().split())))
t=int(input())
pixel=0

for i in range(r-2):
    for j in range(c-2):
        tmplist=[]
        for k in range(i,i+3):
            for l in range(j,j+3):
                tmplist.append(image[k][l])
        tmplist.sort()
        if tmplist[4]>=t:
            pixel+=1
        new_image.append(tmplist[4]) # 중앙값

print(pixel)
```

for문을 전체 가로*세로, 필터의 층을 구할 필터 가로*필터 세로 형식으로 4번 돌렸다. 각 필터 위치별로 9개의 수를 임시 배열 tmplist에 담고, 해당 리스트를 정렬하여 그 중간 인덱스 값을 가져온다. 해당 값을 t와 비교하여 크거나 같으면 pixel 값을 1 증가시키는 형식의 브루트포스 알고리즘으로 작성하였다. 

### 시간복잡도

우선 for문 4번에서 O(r*c*3*3), 뽑아낸 필터 값을 정렬하는 과정에서 O(9log9)가 걸린다. 상수 수를 제거하면 O(r*c)가 될 것 같다. 다만 필터 크기(f)가 상수로 고정이 아닌 경우라면 O(r*c*f*f*((f^2)log(f^f)))가 걸린다.
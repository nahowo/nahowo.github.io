---
layout: post
title: "[Python] 힙과 우선순위 큐"
date: "2024-1-8 13:59"
category: "Data-Structure"
toc: true
toc_sticky: true
---
## 힙(Heap)

힙은 **완전이진트리**를 기본으로 한 자료구조이며, 힙의 구조에 따라 최댓값 혹은 최솟값을 빠르게 찾아낼 수 있도록 한다. 

**최대 힙**은 부모 노드의 키값이 자식 노드의 키값보다 항상 큰 구조이다. 따라서 루트 노드에는 해당 힙의 최댓값이 오게 된다. **최소 힙**도 동일한 로직으로 부모 노드의 키값이 자식 노드의 키값보다 항상 작고, 루트 노드에는 최솟값이 존재한다. 

형제 노드 사이에는 대소관계가 정해지지 않는다. 

## 우선순위 큐(Priority Queue)

**큐(Queue)**란 **선입선출(FIFO)** 방식을 사용하는 자료구조이다. 우선순위 큐에서는 각 원소가 우선순위를 가지며, 높은 우선순위를 가진 원소는 낮은 우선순위를 가지는 원소보다 먼저 처리된다. 원소끼리 우선순위가 같은 경우 기존의 선입선출 방식을 사용한다. 

## 파이썬 heapq 모듈

파이썬에 내장된 heapq 모듈은 우선순위 큐를 구현한다. 파이썬의 리스트를 최소 힙처럼 다룰 수 있게 도와주며, 실제로 heapq 자료구조를 생성하는 것은 아니다. 

가장 작은 값이 항상 heapq의 0번째 인덱스에 위치한다. 따라서 heapq.sort()로 리스트를 오름차순으로 정렬하더라도 힙 불변성을 유지할 수 있다. 

### heapq 모듈 함수

- `heapq.heappush(heap, item)`
    
    item 값을 heap으로 푸시한다. item값이 이전 heap에 들어있던 원소들 중 가장 작다면, heap[0]에 item이 위치하게 된다. 원소를 삽입할 때 힙의 높이만큼 비교하므로 해당 연산의 시간복잡도는 O(logn)이다. 
    
- `heapq.heappop(heap)`
    
    heap에서 가장 작은 값을 팝하고 반환한다. 해당 연산을 수행하려는 리스트가 비어있다면 IndexError가 발생한다. 힙 불변성을 유지하기 위해 현재 가장 작은 값 다음으로 작은 값을 탐색하는 과정에서 O(logn)의 시간복잡도가 발생한다. 
    
- `heapq.heappushpop(heap, item)`
    
    heap에 item을 푸시한 다음 heap에서 가장 작은 항목을 팝하고 반환한다. heappush() → heappop() 보다 효율적으로 실행된다. 
    
- `heapq.heapify(x)`
    
    x 리스트를 힙으로 변환한다. O(n)의 시간복잡도를 가진다. 
    
- `heapq.heapreplace(heap, item)`
    
    heap에서 가장 작은 원소를 팝하고 반환한 뒤 새로운 item을 heap에 푸시한다. heap이 비어 있다면 IndexError가 발생한다. heappop() → heappush()보다 효율적으로 실행된다.
---
layout: post
title: "[BOJ] 7662: 이중 우선순위 큐"
date: "2024-1-8 17:13"
category: "PS"
toc: true
toc_sticky: true
---
<!-- ## :  -->
### [BOJ] 7662: 이중 우선순위 큐

[문제 링크](https://www.acmicpc.net/problem/7662)

### 문제 설명

원래 [heapq](https://nahowo.github.io/data-structure/2024/01/08/DS-heapq.html)에 대해 공부하고, 최소 힙 문제를 푼 다음에 이 문제를 풀었어야 했는데, 솔브닥에서 무작위로 문제를 선정하다 보니 파이썬 heapq 모듈에 대해 모르는 상태에서 이 문제를 접하게 되었다… 그래서 초반에 삽질을 많이 하다가 다른 분들의 풀이를 많이 찾아보게 되었다. 

[최소 힙 문제](https://www.acmicpc.net/problem/1927)와 비슷하지만 이 문제에서는 최댓값도 출력할 수 있어야 한다. 파이썬의 heapq 모듈은 최소 힙만 지원하기 때문에, 입력받는 정수에 -1을 곱해 최대 힙을 구현한다. 이 때 두 배열 간 어떻게 동기화를 해 주는지가 중요한 문제이다. 

### 나의 풀이

```python
import sys
import heapq
input=sys.stdin.readline

t=int(input())
def func():
    k=int(input())
    minq=[]
    maxq=[]
    res="EMPTY"
    check=[0]*k

    for i in range(k):
        command,integer=input().rstrip().split()
        if command=='I':
            heapq.heappush(minq,(int(integer),i))
            heapq.heappush(maxq,(int(integer)*(-1),i))
            check[i]=True
        else:
            if integer=='1':
                while len(maxq)>0 and not check[maxq[0][1]]:
                    heapq.heappop(maxq)
                if len(maxq)>0:
                    check[maxq[0][1]]=False
                    heapq.heappop(maxq)
            else:
                while len(minq)>0 and not check[minq[0][1]]:
                    heapq.heappop(minq)
                if len(minq)>0:
                    check[minq[0][1]]=False
                    heapq.heappop(minq)

    while len(minq)>0 and not check[minq[0][1]]:
        heapq.heappop(minq)
    while len(maxq)>0 and not check[maxq[0][1]]:
        heapq.heappop(maxq)
    if len(minq)>0:
        res=str((-1)*maxq[0][0])+" "+str(minq[0][0])
    return res
for _ in range(t):
    print(func())
```

삽입 연산일 때는 최소, 최대 힙에 각 원소를 삽입한다. 삭제 연산에서 최댓값인 경우는 최대 힙에서 while문을 돌려 허수인 경우(이미 큐에서 삭제된 수일 경우)를 제거한 뒤 최댓값을 삭제한다. 최솟값인 경우도 동일한 방식으로 최솟값을 삭제한다. 모든 연산이 다 끝난 후 다시 while문을 돌려 최종적인 최댓값, 최솟값을 출력한다. 

### 시간복잡도

연산을 k번 수행하고, 삽입 연산인 경우 O(logn), 삭제 연산인 경우 O(nlogn)이 걸린다. 최악의 경우로 가정하면 전체적으로는 O(t*k*nlogn)이 나온다.
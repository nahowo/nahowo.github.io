---
layout: post
title: "[자바 백엔드] 3장 게시판 만들고 새 글 작성하기: Create"
date: "2024-1-9 12:18"
category: "Spring-Boot"
toc: true
toc_sticky: true
---
### 3.1 폼 데이터

폼(form) 데이터는 이름에서 알 수 있듯이 HTML에서 form 태그 안에 담겨 전달되는 데이터를 말한다. 폼 데이터는 작성된 어디로, 어떻게 데이터를 전송할지의 정보를 기반으로 웹 브라우저에서 서버로 데이터를 전송한다. 서버의 컨트롤러로 전달된 데이터는 객체에 담기게 되는데, 이 객체를 DTO(Data Transfer Object)라고 한다. DTO로 받은 데이터는 최종적으로 데이터베이스에 담기게 된다. 

### 3.2 폼 데이터를 DTO로 받기

1. 입력 폼 만들기

    사용자가 데이터를 입력할 수 있는 입력 폼을 .mustache로 작성한다. 폼 데이터이므로 form 태그로 묶어 받으면 되고, input이나 textarea 태그에 입력할 데이터를 작성하면 된다. 
    

2. 입력 페이지를 보기 위한 컨트롤러 만들기
    
    작성한 입력 페이지를 보기 위해 컨트롤러를 만든다. @Controller 어노테이션으로 컨트롤러임을 선언한 뒤 입력 페이지 파일 경로를 작성하고, @GetMapping으로 url을 설정한다. 
    
3. 폼 데이터 전송
    
    1번에서 작성했던 입력 폼을 수정해서 폼 데이터를 어떻게, 어디로 보낼지를 설정해준다. 
    
    작성했던 input 또는 textarea 태그에 속성값으로 ‘action=[입력 폼을 보낼 url 주소]’를 주어 어디로 보낼 지를 설정한다. ‘method=[HTTP 메서드]’ 속성값으로는 post나 get을 사용해서 어떻게 전달할지를 설정한다. 
    
4. 폼 데이터 받기
    
    2번에서 작성한 컨트롤러를 수정한다. 뷰 페이지에서 폼 데이터를 post 형식으로 전송했으므로 컨트롤러에서도 @PostMapping을 사용해 받는다. 뒤에는 action 속성으로 설정했던 데이터를 받을 주소를 작성한다. 
    
5. DTO 만들기
    
    DTO를 위한 패키지와 클래스를 만든다. 1번에서 입력 폼에 작성했던 input이나 textarea태그의 개수만큼의 필드를 DTO 클래스에 선언하고, 생성자와 확인을 위한 toString() 메서드를 추가한다. 
    
6. 폼 데이터를 DTO에 담기
    
    2번에서 작성한 컨트롤러에서 매개변수로 DTO를 전달한다. 
    
7. 입력 폼과 DTO 연결하기
    
    1번에서 작성한 입력 폼의 각 input, textarea 태그에 name 속성을 주어 각 필드에 이름을 설정해 준다. 이 이름은 5번 DTO 클래스에서 작성한 각 필드별 변수명과 매칭되어야 한다. 
    

### 3.3 DTO를 데이터베이스에 저장하기

1. DTO를 엔티티로 변환
    
    엔티티란 자바 객체를 DB가 이해할 수 있게 만든 것이다. 엔티티를 작성할 패키지를 생성하고 그 안에 엔티티 클래스를 작성한다. @Entity 어노테이션으로 엔티티임을 선언하고, DB 테이블 열 별로 @Colum 어노테이션을 선언해 준다. 엔티티 객체의 생성/초기화를 위해 생성자를 추가하고, DTO와 마찬가지로 확인을 위한 toString() 메서드도 추가한다. 
    
    DTO 클래스에 toEntity() 메서드를 추가한다. 메서드 리턴으로는 엔티티 클래스의 생성자 매개변수 양식에 맞춰서 값을 반환한다. 
    
2. 리파지터리로 엔티티를 DB에 저장
    
    리파지터리는 엔티티가 DB속 테이블에 저장/관리될 수 있도록 하는 인터페이스이다. 리파지터리 패키지를 만들고, 새로운 인터페이스를 리퍼지터리 이름으로 생성한다. 해당 인터페이스가 CrudRepository를 상속받게 하면 DB 데이터를 생성, 삭제, 조회, 수정 구현을 이용할 수 있다. 데이터를 DB에 저장하기 위해서는 CrudRepository의 save() 메서드를 사용하면 된다. 
    
    @Autowired 어노테이션을 사용해 스프링 부트가 미리 생성해 놓은 리파지터리 객체를 주입(DI)할 수 있다. 
    

### 3.4 DB 데이터 조회하기

1. H2 DB 접속하기
    
    src>main>resources 경로에 application.properties에 `spring.h2.console.enabled=true` 코드를 작성해서 H2 DB에 웹 콘솔로 접근이 가능하도록 설정한다. 서버를 다시 돌리고 localhost:8080/h2-console에 접속한다. 서버 런 탭에서 Ctrl+F로 ‘jdbc’를 검색하고 ‘jdbc:h2:mem: ~”을 찾아 복사한다. 복사한 것을 웹 콘솔의 JDBC URL에 붙여넣기하고 Connect를 누르면 DB에 접속할 수 있다. 
    
2. 데이터 조회하기
    
    이전에 작성해 둔 테이블을 클릭하면 조회를 위한 SQL문이 나온다. 3.2에서 만든 데이터 입력 링크에서 데이터를 작성한 뒤 전송하면 해당 데이터를 웹 콘솔에서 확인할 수 있다. 웹 콘솔에서도 SQL문을 통해 데이터를 추가할 수 있다.
---
layout: post
title: "[BOJ] 17204: 죽음의 게임"
date: "2024-1-24 12 53:"
category: "PS"
toc: true
toc_sticky: true
---
### [BOJ] 17204: 죽음의 게임

[문제 링크](https://www.acmicpc.net/problem/17204)

### 문제 설명

영기와 보성이는 새내기들과 술게임을 한다. 게임에 참가하는 n명의 사람들이 각자 한 명씩 지목할 때(본인을 지목할 수도 있다), 0번째 사람에서 시작해서 해당 사람이 지목한 사람의 순서가 된다. 이런 지목을 m번만큼 반복해서 m번째 사람이 술을 마시는 죽음의 게임에서, 영기는 보성이를 노리고 있다. 무조건 영기부터 시작할 때(영기가 0번째 사람일 때) 보성이가 술을 마시게 하기 위해서는 m을 몇으로 해야 하는지 계산해 보자. 

### 나의 풀이

```python
import sys
input=sys.stdin.readline

def func():
    n,k=map(int,input().split())
    graph=[]

    for _ in range(n):
        graph.append(int(input()))
    
    cnt=1
    i=0
    for _ in range(n):
        tmp=graph[i] # tmp는 i가 지목한 사람
        if tmp!=k and tmp!=0 and tmp!=i: # 지목된 사람이 영기나 보성이가 아니고, 자신을 지목하지 않은 경우
            cnt+=1
        elif tmp==k: # 보성이를 찾은 경우
            break
        elif i!=0 and tmp==0: # 영기인 경우
            break
        elif i==0 and tmp==0: # 영기가 자신을 지목한 경우
            break
        i=tmp

    if tmp!=k:
        return -1
    else:
        return cnt

print(func())
```

게임에 참가하는 n명의 사람은 한 사람씩만 지목할 수 있으므로, 결국 0번→k번(보성이의 위치)까지의 경로는 아예 없거나 1개만 존재한다. 우선 지목된 사람이 영기나 보성이가 아닌 경우에는 지목 횟수를 증가시킨다. 보성이를 찾은 경우에는 현재까지의 지목 횟수를 출력하면 된다. 

0→k까지의 경로가 없는 경우를 생각해 보면, 영기가 처음부터 자신을 지목한 경우가 있을 수 있다. 또한 보성이를 찾지 못했는데 순서가 영기에게 돌아온 경우, 보성이가 포함되지 않은 사이클이 생기게 되므로 k번째 사람에게로 가는 경로는 존재하지 않는다. 

### 시간복잡도

각 참가자가 지목하는 사람을 찾으며 순회하는 과정에서 O(n)의 시간복잡도가 걸린다.